openapi: 3.0.3
info:
  title: Mock Security API
  version: 1.1.0
servers:
  - url: http://127.0.0.1:8000

paths:
  /users/{userId}/profile:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
        description: User identifier
    get:
      summary: Get user profile
      operationId: getUserProfile
      tags: [users]
      responses:
        '200': { description: OK }
        '401': { description: Unauthenticated }
        '404': { description: Not Found }
    patch:
      summary: Update user profile
      operationId: patchUserProfile
      tags: [users]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                name: { type: string }
      responses:
        '200': { description: Updated }
        '401': { description: Unauthenticated }
        '403': { description: Forbidden }
        '404': { description: Not Found }

  /accounts/{accountId}/transfer:
    parameters:
      - name: accountId
        in: path
        required: true
        schema:
          type: string
        description: Account identifier
    post:
      summary: Transfer between accounts
      operationId: postAccountTransfer
      tags: [accounts]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                toAccountId: { type: string }
                amount: { type: number }
      responses:
        '200': { description: Transfer processed (demo: also returned for unauth/x-tenant for testing) }
        '400': { description: Bad request (validation failed) }
        '401': { description: Unauthenticated (expected, but app returns 200 to demonstrate Broken Auth) }
        '403': { description: Forbidden (expected for x-tenant, but app returns 200 to demonstrate IDOR/BOLA) }
        '404': { description: Not found }

  /orders/{orderId}/cancel:
    parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: string
        description: Order identifier
    delete:
      summary: Cancel an order
      operationId: deleteOrderCancel
      tags: [orders]
      responses:
        '200':
          description: Order cancelled (demo: also returned for unauth and cross-tenant to surface issues)
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string }
                  owner: { type: string }
                  status: { type: string, enum: [open, cancelled] }
                  note: { type: string }
        '401': { description: Unauthenticated (expected by test, but app currently returns 200) }
        '403': { description: Forbidden (expected for cross-tenant, but app currently returns 200) }
        '404': { description: Not found }

  /admin/reports:
    get:
      summary: Admin-only report
      operationId: getAdminReports
      tags: [admin]
      responses:
        '200': { description: OK (only admin should succeed) }
        '401': { description: Unauthenticated }
        '403': { description: Forbidden (non-admin users) }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
