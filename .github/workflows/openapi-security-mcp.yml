name: OpenAPI → Security tests with Postman MCP

on:
  pull_request:
    paths:
      - "openapi/**.y*ml"
      - "openapi/**.json"
      - "app/**"
      - "tools/**"
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

env:
  POSTMAN_MCP_URL: https://mcp.postman.com/mcp
  POSTMAN_WORKSPACE_NAME: Smart API Security Agent
  POSTMAN_ENV_NAME: SASA Env
  POSTMAN_CLI_DISABLE_TELEMETRY: "true"

jobs:
  test-on-openapi-change:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Setup Node (for swagger-cli)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install openai requests

      - name: Install CLI tooling (Postman CLI + swagger-cli)
        run: |
          # Postman CLI (official)
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
          # OpenAPI validator
          npm i -g @apidevtools/swagger-cli@4
          postman --version
          swagger-cli --version

      - name: Install oasdiff (Linux binary, pinned)
        run: |
          set -euo pipefail
          OASDIFF_VERSION="v1.10.28"
          TARBALL="oasdiff_${OASDIFF_VERSION#v}_linux_amd64.tar.gz"
          URL_PRIMARY="https://github.com/Tufin/oasdiff/releases/download/${OASDIFF_VERSION}/${TARBALL}"
          URL_FALLBACK="https://github.com/oasdiff/oasdiff/releases/download/${OASDIFF_VERSION}/${TARBALL}"
          echo "Downloading oasdiff ${OASDIFF_VERSION}…"
          if ! curl -fL "$URL_PRIMARY" -o oasdiff.tgz; then
            echo "Primary URL failed, trying fallback…"
            curl -fL "$URL_FALLBACK" -o oasdiff.tgz
          fi
          tar -xzf oasdiff.tgz
          chmod +x oasdiff
          sudo mv oasdiff /usr/local/bin/oasdiff

      - name: Start sample app (localhost:8000)
        run: |
          python app/app.py &
          echo $! > app.pid
          # Warm up; just need the server responding
          for i in {1..20}; do
            if curl -fsSI http://127.0.0.1:8000/ >/dev/null 2>&1; then
              echo "App is up"
              break
            fi
            sleep 1
          done

      - name: Compute OpenAPI diff (base vs head)
        run: |
          set -euo pipefail
          BASE=origin/${{ github.base_ref || 'main' }}
          HEAD=origin/${{ github.head_ref || github.ref_name }}
          mkdir -p .tmp
          FILE=$(git diff --name-only "$BASE...$HEAD" | grep -E '^openapi/.*\.(ya?ml|json)$' | head -n1 || true)
          if [ -z "${FILE:-}" ]; then
            echo "No OpenAPI changes detected."
            echo '{}' > diff.json
          else
            git show "$BASE:$FILE" > .tmp/base.yaml || cp openapi/api.v1.yaml .tmp/base.yaml
            git show "$HEAD:$FILE" > .tmp/head.yaml || cp openapi/api.yaml    .tmp/head.yaml
            swagger-cli validate .tmp/base.yaml
            swagger-cli validate .tmp/head.yaml
            oasdiff diff --format json .tmp/base.yaml .tmp.head.yaml > /dev/null 2>&1 || true
            oasdiff diff --format json .tmp/base.yaml .tmp/head.yaml > diff.json
          fi
          echo "Wrote diff.json"

      - name: LLM → plan & create/overwrite collection via official Postman MCP
        env:
          OPENAI_API_KEY:  ${{ secrets.OPENAI_API_KEY }}
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          python tools/agent_openapi_to_postman.py \
            --base openapi/api.v1.yaml \
            --head openapi/api.yaml \
            --diff diff.json \
            --collection "security test collection" \
            --plan plan.json
          test -f generated-security-test.postman_collection.json

      # --- NEW: Normalize placeholders {id} → {{id}} for Postman runtime ---
      - name: Normalize path placeholders for Postman
        run: |
          python - <<'PY'
import json, re
p='generated-security-test.postman_collection.json'
j=json.load(open(p))
def fix_item(item):
    if isinstance(item, dict):
        if 'request' in item and 'url' in item['request']:
            url=item['request']['url']
            if isinstance(url, dict) and 'raw' in url:
                raw=url['raw']
                raw_new=re.sub(r'\{([A-Za-z0-9_]+)\}', r'{{\\1}}', raw)
                if raw_new!=raw:
                    url['raw']=raw_new
            elif isinstance(url, str):
                url_new=re.sub(r'\{([A-Za-z0-9_]+)\}', r'{{\\1}}', url)
                if url_new!=url:
                    item['request']['url']=url_new
        for k,v in list(item.items()):
            fix_item(v)
    elif isinstance(item, list):
        for it in item:
            fix_item(it)
fix_item(j)
with open(p,'w') as f: json.dump(j,f,indent=2)
print("Placeholders normalized in collection.")
PY

      # --- NEW: Build a Postman environment from LLM plan (with smart defaults) ---
      - name: Build Postman environment (env.json)
        run: |
          python - <<'PY'
import json, os, pathlib
# Defaults for the demo app in "vulnerable" behavior
env = {
  "id": "auto-env",
  "name": "SASA Env",
  "values": [
    {"key":"baseUrl","value":"http://127.0.0.1:8000","type":"text","enabled":True},
    {"key":"ownerUserId","value":"1","type":"text","enabled":True},
    {"key":"otherUserId","value":"2","type":"text","enabled":True},
    {"key":"ownerToken","value":"t1","type":"text","enabled":True},
    {"key":"otherToken","value":"t2","type":"text","enabled":True},
    {"key":"adminToken","value":"admin","type":"text","enabled":True},
    {"key":"orderIdOwner","value":"201","type":"text","enabled":True},
    {"key":"orderIdOther","value":"202","type":"text","enabled":True},
    {"key":"accountIdOwner","value":"101","type":"text","enabled":True},
    {"key":"accountIdOther","value":"102","type":"text","enabled":True}
  ]
}
# If LLM wrote plan.json with better IDs/tokens, merge them in
try:
  plan = json.load(open('plan.json'))
  for k in ["baseUrl","ownerUserId","otherUserId","ownerToken","otherToken","adminToken",
            "orderIdOwner","orderIdOther","accountIdOwner","accountIdOther"]:
    v = plan.get("environment",{}).get(k)
    if v:
      for e in env["values"]:
        if e["key"]==k:
          e["value"]=str(v)
except FileNotFoundError:
  pass
pathlib.Path('env.json').write_text(json.dumps(env,indent=2))
print("env.json written.")
PY
          cat env.json

      - name: Postman CLI login (non-interactive)
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          postman login --with-api-key "$POSTMAN_API_KEY"

      - name: Run generated collection with Postman CLI (JSON reporter)
        continue-on-error: true
        run: |
          postman collection run ./generated-security-test.postman_collection.json \
            --environment ./env.json \
            --reporters cli,json \
            --reporter-json-export run.json \
          || true
          # ensure run.json exists so the next step never crashes
          [ -f run.json ] || echo '{"run":{"failures":[],"stats":{"assertions":{"total":0,"failed":0}}}}' > run.json
          ls -l run.json

      - name: Convert Postman report → SARIF
        run: |
          python tools/cli_report_to_sarif.py run.json sarif.json

      # --- FIXED: Build PR summary using a heredoc Node script (no shell expansion issues) ---
      - name: Build PR summary markdown
        if: github.event_name == 'pull_request'
        run: |
          cat <<'NODE_SCRIPT' > build_summary.js
          const fs = require('fs');
          const s = JSON.parse(fs.readFileSync('sarif.json','utf8'));
          const res = ((s.runs||[{}])[0].results)||[];
          const total = res.length;
          const emoji = (l)=>({error:'❌',warning:'⚠️',note:'ℹ️'})[l]||'❔';
          const lines=[];
          lines.push('**Postman Security Test Agent — Findings**');
          lines.push('');
          lines.push(`Detected **${total}** finding${total===1?'':'s'}.`);
          if(total===0){
            lines.push('');
            lines.push('> ✅ No security test failures detected');
          }else{
            lines.push('');
            lines.push('|  | Severity | Finding |');
            lines.push('|---|---|---|');
            for(const r of res){
              const lvl=r.level||'note';
              const msg=(r.message&&r.message.text)||'(no message)';
              lines.push(`| ${emoji(lvl)} | ${lvl} | ${msg} |`);
            }
          }
          lines.push('');
          lines.push('Artifacts: `diff.json`, `plan.json`, `run.json`, `sarif.json`, and the generated collection are attached to this run.');
          fs.writeFileSync('sarif_summary.md', lines.join('\n'));
          NODE_SCRIPT
          node build_summary.js
          cat sarif_summary.md

      - name: Post sticky PR comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: Postman Security Summary
          path: sarif_summary.md

      # Upload SARIF to GitHub Code Scanning (pin to PR head ref/sha)
      - name: Upload SARIF to GitHub Code Scanning
        if: github.event_name == 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif.json
          category: openapi-postman-security
          ref: refs/heads/${{ github.head_ref }}
          sha: ${{ github.event.pull_request.head.sha }}
          wait-for-processing: true

      - name: Upload artifacts (diff, plan, run, sarif, collection, env)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-security-output
          path: |
            diff.json
            plan.json
            run.json
            sarif.json
            env.json
            generated-security-test.postman_collection.json

      - name: Stop sample app
        if: always()
        run: |
          kill "$(cat app.pid)" 2>/dev/null || true
