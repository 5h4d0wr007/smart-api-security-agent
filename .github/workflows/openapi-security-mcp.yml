name: OpenAPI → Security tests with Postman MCP

on:
  pull_request:
    paths:
      - "openapi/**.y*ml"
      - "openapi/**.json"
      - "app/**"
      - "tools/**"

permissions:
  contents: read
  security-events: write
  actions: read   # needed by upload-sarif

env:
  POSTMAN_MCP_URL: ${{ vars.POSTMAN_MCP_URL }}                # e.g. https://mcp.postman.com/mcp
  POSTMAN_WORKSPACE_NAME: ${{ vars.POSTMAN_WORKSPACE_NAME }}  # e.g. Security Demo
  POSTMAN_ENV_NAME: ${{ vars.POSTMAN_ENV_NAME }}
  POSTMAN_CLI_DISABLE_TELEMETRY: "true"

jobs:
  test-on-openapi-change:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Setup Node (for swagger-cli)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install openai requests

      - name: Install CLI tooling (Postman CLI + swagger-cli)
        run: |
          # Postman CLI (official)
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
          # OpenAPI validator
          npm i -g @apidevtools/swagger-cli@4
          postman --version
          swagger-cli --version

      - name: Install oasdiff (Linux binary, pinned)
        run: |
          set -euo pipefail
          OASDIFF_VERSION="v1.10.28"
          TARBALL="oasdiff_${OASDIFF_VERSION#v}_linux_amd64.tar.gz"
          URL_PRIMARY="https://github.com/Tufin/oasdiff/releases/download/${OASDIFF_VERSION}/${TARBALL}"
          URL_FALLBACK="https://github.com/oasdiff/oasdiff/releases/download/${OASDIFF_VERSION}/${TARBALL}"
          echo "Downloading oasdiff ${OASDIFF_VERSION}…"
          if ! curl -fL "$URL_PRIMARY" -o oasdiff.tgz; then
            echo "Primary URL failed, trying fallback…"
            curl -fL "$URL_FALLBACK" -o oasdiff.tgz
          fi
          tar -xzf oasdiff.tgz
          chmod +x oasdiff
          sudo mv oasdiff /usr/local/bin/oasdiff

      - name: Start sample app (localhost:8000)
        run: |
          python app/app.py &
          echo $! > app.pid
          # Warm up; just need the server responding
          for i in {1..20}; do
            if curl -fsSI http://127.0.0.1:8000/ >/dev/null 2>&1; then
              echo "App is up"
              break
            fi
            sleep 1
          done

      - name: Compute OpenAPI diff (base vs head)
        run: |
          set -euo pipefail
          BASE=origin/${{ github.base_ref }}
          HEAD=origin/${{ github.head_ref }}
          mkdir -p .tmp
          FILE=$(git diff --name-only "$BASE...$HEAD" | grep -E '^openapi/.*\.(ya?ml|json)$' | head -n1 || true)
          if [ -z "${FILE:-}" ]; then
            echo "No OpenAPI changes detected."
            echo '{}' > diff.json
          else
            git show "$BASE:$FILE" > .tmp/base.yaml || cp openapi/api.v1.yaml .tmp/base.yaml
            git show "$HEAD:$FILE" > .tmp/head.yaml || cp openapi/api.yaml    .tmp/head.yaml
            swagger-cli validate .tmp/base.yaml
            swagger-cli validate .tmp/head.yaml
            oasdiff diff --format json .tmp/base.yaml .tmp/head.yaml > diff.json
          fi
          echo "Wrote diff.json"

      - name: LLM → plan & create/overwrite collection via official Postman MCP
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          python tools/agent_openapi_to_postman.py \
            --base openapi/api.v1.yaml \
            --head openapi/api.yaml \
            --diff diff.json \
            --collection "security test collection" \
            --plan plan.json

      - name: Postman CLI login (non-interactive)
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          postman login --with-api-key "$POSTMAN_API_KEY"

      - name: Run generated collection with Postman CLI (JSON reporter)
        continue-on-error: true
        run: |
          postman collection run ./generated-security-test.postman_collection.json \
            --reporters cli,json \
            --reporter-json-export run.json \
          || true
          # ensure run.json exists so next step never crashes
          [ -f run.json ] || echo '{"run":{"failures":[],"stats":{"assertions":{"total":0,"failed":0}}}}' > run.json

      - name: Convert Postman report → SARIF
        run: |
          python tools/cli_report_to_sarif.py run.json sarif.json

      # ---- NEW: sticky PR comment (human-readable summary) ----
      - name: Post PR summary (sticky comment + job summary)
        if: github.event_name == 'pull_request'
        run: |
          python - <<'PY'
import json, pathlib, os
sarif = json.load(open('sarif.json'))
results = sarif.get('runs',[{}])[0].get('results',[])
def sev_emoji(level): return {"error":"❌","warning":"⚠️","note":"ℹ️"}.get(level,"❔")
lines = ["**Postman Security Test Agent — Findings**"]
if not results:
    lines.append("\n> ✅ No security test failures detected")
else:
    lines.append("\n|  | Severity | Finding |")
    lines.append("|---|---|---|")
    for r in results:
        msg   = r.get("message",{}).get("text","(no message)")
        level = r.get("level","note")
        lines.append(f"| {sev_emoji(level)} | {level} | {msg} |")
    lines.append("\n_Artifacts: `run.json`, `sarif.json`, and the generated collection are attached to this run._")
pathlib.Path('sarif_summary.md').write_text("\n".join(lines))
with open(os.environ['GITHUB_STEP_SUMMARY'],'w') as f: f.write("\n".join(lines))
PY
      - uses: marocchino/sticky-pull-request-comment@v3
        if: github.event_name == 'pull_request'
        with:
          header: Postman Security Summary
          path: sarif_summary.md

      # ---- NEW: upload SARIF pinned to PR head (same-repo PRs / pushes) ----
      - name: Upload SARIF to GitHub Code Scanning
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif.json
          category: postman-security
          commit_sha: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
          ref:        ${{ github.event_name == 'pull_request' && format('refs/heads/{0}', github.head_ref) || format('refs/heads/{0}', github.ref_name) }}

      - name: Upload artifacts (diff, plan, run, sarif, collection)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-security-output
          path: |
            diff.json
            plan.json
            run.json
            sarif.json
            generated-security-test.postman_collection.json

      - name: Stop sample app
        if: always()
        run: |
          kill "$(cat app.pid)" 2>/dev/null || true
