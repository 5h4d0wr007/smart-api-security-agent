name: test-on-openapi-change

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "openapi/**"
      - "api/**"
      - ".github/workflows/test-on-openapi-change.yml"
      - "tools/**"

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  test-on-openapi-change:
    runs-on: ubuntu-latest
    env:
      # Keep artifact locations consistent with your existing run
      ARTIFACT_DIR: artifacts
      RUN_JSON: artifacts/run.json
      SARIF_JSON: artifacts/sarif.json
      PLAN_JSON: artifacts/plan.json
      DIFF_JSON: artifacts/diff.json

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Setup toolchains ----------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Setup Node (for swagger-cli)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Install CLI tooling (Postman CLI + swagger-cli)
        run: |
          npm i -g @postman/cli swagger-cli
          postman --version
          swagger-cli --version

      - name: Install oasdiff (Linux binary, pinned)
        run: |
          OASDIFF_VERSION="2.10.1"
          curl -sSL -o /usr/local/bin/oasdiff \
            "https://github.com/Tufin/oasdiff/releases/download/v${OASDIFF_VERSION}/oasdiff-linux-amd64"
          chmod +x /usr/local/bin/oasdiff
          oasdiff version

      # ---------- Spin up sample app (adjust command if yours differs) ----------
      - name: Start sample app (localhost:8000)
        run: |
          set -e
          nohup python tools/dev_app.py > app.log 2>&1 &
          # Wait until port 8000 is open
          for i in {1..50}; do
            nc -z 127.0.0.1 8000 && break
            sleep 0.2
          done

      # ---------- Compute OpenAPI diff ----------
      - name: Compute OpenAPI diff (base vs head)
        id: diff
        run: |
          mkdir -p "$ARTIFACT_DIR"
          # Update these paths to match your repo locations, if needed
          BASE_SPEC="openapi/base.yaml"
          HEAD_SPEC="openapi/head.yaml"
          oasdiff -format json $BASE_SPEC $HEAD_SPEC > "$DIFF_JSON" || true
          echo "diff_path=$DIFF_JSON" >> "$GITHUB_OUTPUT"

      # ---------- Plan via MCP and generate/overwrite collection ----------
      - name: LLM → plan & create/overwrite collection via official Postman MCP
        run: |
          python tools/agent_openapi_to_postman.py \
            --diff "$DIFF_JSON" \
            --out-plan "$PLAN_JSON" \
            --out-collection "$ARTIFACT_DIR/collection.json"

      # ---------- Postman auth (non-interactive). Expects POSTMAN_API_KEY in secrets ----------
      - name: Postman CLI login (non-interactive)
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          if [ -z "$POSTMAN_API_KEY" ]; then
            echo "POSTMAN_API_KEY is not set"; exit 1
          fi
          postman login --with-api-key $POSTMAN_API_KEY

      # ---------- Run the generated collection and capture JSON report ----------
      - name: Run generated collection with Postman CLI (JSON reporter)
        run: |
          mkdir -p "$ARTIFACT_DIR"
          postman collection run "$ARTIFACT_DIR/collection.json" --integration-id "github" --reporters json --reporter-json-export "$RUN_JSON" || true
          test -f "$RUN_JSON" || { echo "run.json not found"; cat "$ARTIFACT_DIR" || true; exit 1; }
          echo "Postman run saved to $RUN_JSON"

      # ---------- Convert Postman report → SARIF (NEW STEP) ----------
      - name: Convert Postman JSON → SARIF
        run: |
          node tools/postman_json_to_sarif.js "$RUN_JSON" > "$SARIF_JSON"
          echo "SARIF results: $(jq '.runs[0].results | length' "$SARIF_JSON")"

      # ---------- (Optional) Build PR summary markdown from SARIF count ----------
      - name: Build PR summary markdown
        run: |
          COUNT=$(jq '.runs[0].results | length' "$SARIF_JSON")
          {
            echo "Postman Security Test Agent — Findings"
            echo
            echo "Detected ${COUNT} finding(s)."
            echo
            echo "Artifacts: \`diff.json\`, \`plan.json\`, \`run.json\`, \`sarif.json\`, and the generated collection are attached to this run."
          } > pr-summary.md

      - name: Run marocchino/sticky-pull-request-comment@v2
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: pr-summary.md

      # ---------- Upload SARIF to GitHub Code Scanning (NEW STEP) ----------
      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_JSON }}
          category: postman-security-tests

      # ---------- Attach run artifacts ----------
      - name: Upload artifacts (diff, plan, run, sarif, collection)
        uses: actions/upload-artifact@v4
        with:
          name: postman-security-test-artifacts
          if-no-files-found: warn
          path: |
            ${{ env.DIFF_JSON }}
            ${{ env.PLAN_JSON }}
            ${{ env.RUN_JSON }}
            ${{ env.SARIF_JSON }}
            artifacts/collection.json

      # ---------- Teardown ----------
      - name: Stop sample app
        if: always()
        run: |
          pkill -f tools/dev_app.py || true
          sleep 1
          echo "Stopped app"
