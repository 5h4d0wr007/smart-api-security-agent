name: OpenAPI → Security tests with Postman MCP

on:
  pull_request:
    paths:
      - "openapi/**/*.yml"
      - "openapi/**/*.yaml"
      - "openapi/**/*.json"
      - "app/**"
      - "tools/**"
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  POSTMAN_MCP_URL: ${{ vars.POSTMAN_MCP_URL }}                # e.g. https://mcp.postman.com/mcp
  POSTMAN_WORKSPACE_NAME: ${{ vars.POSTMAN_WORKSPACE_NAME }}  # e.g. Security Demo
  POSTMAN_ENV_NAME: ${{ vars.POSTMAN_ENV_NAME }}
  POSTMAN_CLI_DISABLE_TELEMETRY: "true"

jobs:
  test-on-openapi-change:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Gate secrets (handles forked PRs safely)
      - name: Discover secrets availability (gate for forks)
        id: gates
        shell: bash
        run: |
          has_openai=false
          has_postman=false
          [ -n "${{ secrets.OPENAI_API_KEY }}" ]  && has_openai=true
          [ -n "${{ secrets.POSTMAN_API_KEY }}" ] && has_postman=true
          if $has_openai && $has_postman; then
            echo "has_secrets=true"  >> "$GITHUB_OUTPUT"
          else
            echo "has_secrets=false" >> "$GITHUB_OUTPUT"
          fi
          echo "has_openai=$has_openai"
          echo "has_postman=$has_postman"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Setup Node (for swagger-cli)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install openai requests

      - name: Install CLI tooling (Postman CLI + swagger-cli)
        run: |
          curl -fsSL "https://dl-cli.pstmn.io/install/linux64.sh" | sh
          npm i -g @apidevtools/swagger-cli@4
          postman --version
          swagger-cli --version

      - name: Install oasdiff (Linux binary, pinned)
        run: |
          set -euo pipefail
          OASDIFF_VERSION="v1.10.28"
          # GitHub ubuntu-latest runner uses x86_64; asset name uses linux_amd64
          TARBALL="oasdiff_${OASDIFF_VERSION#v}_linux_amd64.tar.gz"
          URL_PRIMARY="https://github.com/Tufin/oasdiff/releases/download/${OASDIFF_VERSION}/${TARBALL}"
          URL_FALLBACK="https://github.com/oasdiff/oasdiff/releases/download/${OASDIFF_VERSION}/${TARBALL}"
          echo "Downloading oasdiff ${OASDIFF_VERSION}…"
          if ! curl -fL "$URL_PRIMARY" -o oasdiff.tgz; then
            echo "Primary URL failed, trying fallback…"
            curl -fL "$URL_FALLBACK" -o oasdiff.tgz
          fi
          tar -xzf oasdiff.tgz
          chmod +x oasdiff
          sudo mv oasdiff /usr/local/bin/oasdiff

      - name: Start sample app (localhost:8000)
        run: |
          python app/app.py &
          echo $! > app.pid
          # Warm up; just need the server responding
          for i in {1..20}; do
            if curl -fsSI http://127.0.0.1:8000/ >/dev/null 2>&1; then
              echo "App is up"; break
            fi
            sleep 1
          done

      - name: Compute OpenAPI diff (base vs head)
        run: |
          set -euo pipefail
          BASE=origin/${{ github.base_ref }}
          HEAD=origin/${{ github.head_ref }}
          mkdir -p .tmp
          FILE=$(git diff --name-only "$BASE...$HEAD" | grep -E '^openapi/.*\.(ya?ml|json)$' | head -n1 || true)
          if [ -z "${FILE:-}" ]; then
            echo '{}' > diff.json
          else
            git show "$BASE:$FILE" > .tmp/base.yaml || cp openapi/api.v1.yaml .tmp/base.yaml
            git show "$HEAD:$FILE" > .tmp/head.yaml || cp openapi/api.yaml    .tmp/head.yaml
            swagger-cli validate .tmp/base.yaml
            swagger-cli validate .tmp/head.yaml
            oasdiff diff --format json .tmp/base.yaml .tmp/head.yaml > diff.json
          fi
          echo "Wrote diff.json"

      - name: LLM → plan & create/overwrite collection via official Postman MCP
        if: steps.gates.outputs.has_secrets == 'true'
        env:
          OPENAI_API_KEY:  ${{ secrets.OPENAI_API_KEY }}
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          python tools/agent_openapi_to_postman.py \
            --base openapi/api.v1.yaml \
            --head openapi/api.yaml \
            --diff diff.json \
            --collection "security test collection" \
            --plan plan.json
          test -f generated-security-test.postman_collection.json

      - name: Postman CLI login (non-interactive)
        if: steps.gates.outputs.has_secrets == 'true'
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          postman login --with-api-key "$POSTMAN_API_KEY"

      - name: Run generated collection with Postman CLI (JSON reporter)
        if: steps.gates.outputs.has_secrets == 'true'
        continue-on-error: true
        run: |
          set -euo pipefail
          postman collection run ./generated-security-test.postman_collection.json \
            --reporters cli,json \
            --reporter-json-export run.json \
          || true
          # ensure run.json exists so the next step never crashes
          if [ ! -f run.json ]; then
            echo '{"run":{"failures":[],"stats":{"assertions":{"total":0,"failed":0}}}}' > run.json
          fi
          ls -l run.json

      - name: Convert Postman report → SARIF
        if: steps.gates.outputs.has_secrets == 'true'
        run: |
          python tools/cli_report_to_sarif.py run.json sarif.json
          python - <<'PY'
import json
d=json.load(open('sarif.json'))
print("SARIF results:", len(d.get("runs",[{}])[0].get("results",[])))
PY

      # (original brittle node step restored — this made the job run before)
      - name: Build PR comment (markdown) from SARIF
        if: github.event_name == 'pull_request'
        run: |
          node -e "
            const fs=require('fs');
            const s=JSON.parse(fs.readFileSync('sarif.json','utf8'));
            const res=((s.runs||[{}])[0].results)||[];
            const total=res.length;
            const emoji=(l)=>({error:'❌',warning:'⚠️',note:'ℹ️'})[l]||'❔';
            const lines=[];
            lines.push('**Postman Security Test Agent — Findings**');
            lines.push('');
            lines.push(`Detected **${total}** finding${total===1?'':'s'}.`);
            if(total===0){
              lines.push('');
              lines.push('> ✅ No security test failures detected');
            }else{
              lines.push('');
              lines.push('|  | Severity | Finding |');
              lines.push('|---|---|---|');
              for(const r of res){
                const lvl=r.level||'note';
                const msg=(r.message&&r.message.text)||'(no message)';
                lines.push(`| ${emoji(lvl)} | ${lvl} | ${msg.replaceAll('|','\\|')} |`);
              }
            }
            lines.push('');
            lines.push('Artifacts: `diff.json`, `plan.json`, `run.json`, `sarif.json`, and the generated collection are attached to this run.');
            fs.writeFileSync('sarif_summary.md',lines.join('\\n'));
          "

      - name: Post sticky PR comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: Postman Security Summary
          path: sarif_summary.md

      # (1) Optional echo of target ref/sha as a separate step
      - name: Announce SARIF target
        if: steps.gates.outputs.has_secrets == 'true' && (!github.event.pull_request.head.repo.fork)
        run: |
          echo "ref=${{ github.event_name == 'pull_request' && format('refs/heads/{0}', github.head_ref) || format('refs/heads/{0}', github.ref_name) }}"
          echo "sha=${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}"

      # (2) Actual upload step (uses-only; no run here)
      - name: Upload SARIF to GitHub Code Scanning
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif.json
          category: openapi-postman-security
          commit_sha: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
          ref:        ${{ github.event_name == 'pull_request' && format('refs/heads/{0}', github.head_ref) || format('refs/heads/{0}', github.ref_name) }}

      - name: Comment SARIF summary on PR
        if: github.event_name == 'pull_request'
        run: |
          python - <<'PY'
import json, pathlib
d=json.load(open('sarif.json'))
res=d.get('runs',[{}])[0].get('results',[])
lines=["**Postman Security Test Agent Findings**"]
if not res: lines.append("- ✅ No security test failures detected")
else:
  for r in res[:50]:
    lines.append(f"- ❗ {(r.get('message') or {}).get('text','(no message)')}")
pathlib.Path('sarif_summary.md').write_text("\n".join(lines))
PY
      - uses: marocchino/sticky-pull-request-comment@v3
        if: github.event_name == 'pull_request'
        with:
          header: Postman Security Summary
          path: sarif_summary.md

      - name: Upload artifacts (diff, plan, run, sarif, collection)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-security-output
          path: |
            diff.json
            plan.json
            run.json
            sarif.json
            generated-security-test.postman_collection.json

      - name: Stop sample app
        if: always()
        run: |
          kill "$(cat app.pid)" 2>/dev/null || true
