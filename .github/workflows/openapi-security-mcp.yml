name: OpenAPI → Security tests with Postman MCP

on:
  pull_request:
    paths:
      - "openapi/**.y*ml"
      - "openapi/**.json"
      - "app/**"
      - "tools/**"
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

env:
  POSTMAN_MCP_URL: ${{ vars.POSTMAN_MCP_URL }}                # e.g. https://mcp.postman.com/mcp
  POSTMAN_WORKSPACE_NAME: ${{ vars.POSTMAN_WORKSPACE_NAME }}  # e.g. Security Demo
  POSTMAN_ENV_NAME: ${{ vars.POSTMAN_ENV_NAME }}

jobs:
  test-on-openapi-change:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Setup Node (for swagger-cli)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install openai requests

      - name: Install CLI tooling (Postman CLI + swagger-cli)
        run: |
          # Postman CLI (official)
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
          # OpenAPI validator
          npm i -g @apidevtools/swagger-cli@4
          postman --version
          swagger-cli --version

      - name: Install oasdiff (Linux binary, pinned)
        run: |
          set -euo pipefail
          OASDIFF_VERSION="v1.10.28"
          TARBALL="oasdiff_${OASDIFF_VERSION#v}_linux_amd64.tar.gz"
          URL_PRIMARY="https://github.com/Tufin/oasdiff/releases/download/${OASDIFF_VERSION}/${TARBALL}"
          URL_FALLBACK="https://github.com/oasdiff/oasdiff/releases/download/${OASDIFF_VERSION}/${TARBALL}"
          echo "Downloading oasdiff ${OASDIFF_VERSION}…"
          if ! curl -fL "$URL_PRIMARY" -o oasdiff.tgz; then
            echo "Primary URL failed, trying fallback…"
            curl -fL "$URL_FALLBACK" -o oasdiff.tgz
          fi
          tar -xzf oasdiff.tgz
          chmod +x oasdiff
          sudo mv oasdiff /usr/local/bin/oasdiff

      - name: Start sample app (localhost:8000)
        run: |
          python app/app.py &
          echo $! > app.pid
          # Warm up; just need the server responding
          for i in {1..20}; do
            if curl -fsSI http://127.0.0.1:8000/ >/dev/null 2>&1; then
              echo "App is up"
              break
            fi
            sleep 1
          done

      - name: Compute OpenAPI diff (base vs head)
        run: |
          set -euo pipefail
          BASE=origin/${{ github.base_ref }}
          HEAD=origin/${{ github.head_ref }}
          mkdir -p .tmp
          FILE=$(git diff --name-only "$BASE...$HEAD" | grep -E '^openapi/.*\.(ya?ml|json)$' | head -n1 || true)
          if [ -z "${FILE:-}" ]; then
            echo "No OpenAPI changes detected."
            echo '{}' > diff.json
          else
            git show "$BASE:$FILE" > .tmp/base.yaml || cp openapi/api.v1.yaml .tmp/base.yaml
            git show "$HEAD:$FILE" > .tmp/head.yaml || cp openapi/api.yaml    .tmp/head.yaml
            swagger-cli validate .tmp/base.yaml
            swagger-cli validate .tmp/head.yaml
            oasdiff diff --format json .tmp/base.yaml .tmp/head.yaml > diff.json
          fi
          echo "Wrote diff.json"

      - name: LLM → plan & create/overwrite collection via official Postman MCP
        env:
          OPENAI_API_KEY:  ${{ secrets.OPENAI_API_KEY }}
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          python tools/agent_openapi_to_postman.py \
            --base openapi/api.v1.yaml \
            --head openapi/api.yaml \
            --diff diff.json \
            --collection "security test collection" \
            --plan plan.json

      - name: Postman CLI login (non-interactive)
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          postman login --with-api-key "$POSTMAN_API_KEY"

      - name: Run generated collection with Postman CLI (JSON reporter)
        continue-on-error: true
        run: |
          postman collection run ./generated-security-test.postman_collection.json \
            --reporters cli,json \
            --reporter-json-export run.json \
          || true
          # ensure run.json exists so the next step never crashes
          [ -f run.json ] || echo '{"run":{"failures":[],"stats":{"assertions":{"total":0,"failed":0}}}}' > run.json

      - name: Convert Postman report → SARIF
        run: |
          python tools/postman_json_to_sarif.py artifacts/run.json artifacts/sarif.json

      # === Sticky PR comment + Job Summary (endpoint-grouped, all results) ===
      - name: Build PR summary markdown
        if: github.event_name == 'pull_request'
        run: |
          node <<'NODE'
          const fs = require('fs');

          const EMOJI = { passed: '✅', failed: '❌', skipped: '⏭️', unknown: '❔' };

          const loadJSON = (p) => {
            try { return JSON.parse(fs.readFileSync(p, 'utf8')); }
            catch { return null; }
          };

          const run = loadJSON('run.json');
          const sarif = loadJSON('sarif.json');

          const lines = [];
          lines.push('**Postman Security Test Agent — Findings (Grouped by Endpoint)**');
          lines.push('');

          if (run?.run?.executions?.length) {
            const groups = new Map(); // key: "METHOD /path", value: rows
            let totalTests = 0, passed = 0, failed = 0, skipped = 0;

            for (const ex of run.run.executions) {
              const req = ex.requestExecuted || {};
              const resp = ex.response || {};
              const method = (req.method || '').toUpperCase();
              const path = '/' + (req.url?.path || []).join('/');
              const endpoint = `${method} ${path}`;

              // scenario from "(owner) POST /x"
              let scenario = 'scenario';
              const name = req.name || '';
              const m = name.match(/^\(([^)]+)\)\s+[A-Z]+\s+.+$/);
              if (m) scenario = m[1];

              const tests = Array.isArray(ex.tests) ? ex.tests : [];
              if (tests.length === 0) {
                if (!groups.has(endpoint)) groups.set(endpoint, []);
                groups.get(endpoint).push({
                  scenario,
                  test: 'No tests defined',
                  status: 'unknown',
                  code: resp.code,
                  details: ''
                });
                continue;
              }

              for (const t of tests) {
                const status = (t.status || 'unknown').toLowerCase();
                const isPass = status === 'passed';
                const isFail = status === 'failed';
                passed += isPass ? 1 : 0;
                failed += isFail ? 1 : 0;
                skipped += status === 'skipped' ? 1 : 0;
                totalTests += 1;

                const details = t.error?.message ? t.error.message : '';
                if (!groups.has(endpoint)) groups.set(endpoint, []);
                groups.get(endpoint).push({
                  scenario,
                  test: t.name || '(unnamed test)',
                  status,
                  code: resp.code,
                  details
                });
              }
            }

            const endpointCount = groups.size;
            lines.push(`Ran **${totalTests}** test${totalTests===1?'':'s'} across **${endpointCount}** endpoint${endpointCount===1?'':'s'} — ${EMOJI.passed} ${passed} passed · ${EMOJI.failed} ${failed} failed${skipped?` · ${EMOJI.skipped} ${skipped} skipped`:''}.`);
            lines.push('');

            for (const [endpoint, rows] of groups) {
              lines.push(`### \`${endpoint}\``);
              lines.push('');
              lines.push('| Scenario | Test | Result | Details |');
              lines.push('|---|---|---|---|');

              for (const r of rows) {
                const icon = EMOJI[r.status] || EMOJI.unknown;
                const resultText =
                  r.status === 'passed' ? 'passed' :
                  r.status === 'failed' ? `failed [HTTP ${r.code ?? '—'}]` :
                  r.status === 'skipped' ? 'skipped' : 'unknown';
                const details = r.details ? r.details.replace(/\n/g, ' ') : '';
                lines.push(`| \`${r.scenario}\` | ${r.test} | ${icon} ${resultText} | ${details || ''} |`);
              }
              lines.push('');
            }

          } else {
            // Fallback to SARIF only if run.json missing
            const results = (((sarif?.runs||[])[0]||{}).results)||[];
            lines.push('_run.json not found; showing SARIF summary instead._');
            lines.push('');
            if (results.length === 0) {
              lines.push('> ✅ No security test failures detected');
            } else {
              const emoji = (l)=>({error:'❌',warning:'⚠️',note:'ℹ️'})[l]||'❔';
              lines.push('|  | Severity | Finding |');
              lines.push('|---|---|---|');
              for (const r of results) {
                const lvl = (r.level || 'note').toLowerCase();
                lines.push(`| ${emoji(lvl)} | ${lvl} | ${(r.message && r.message.text) || '(no message)'} |`);
              }
            }
          }

          lines.push('');
          lines.push('Artifacts: `diff.json`, `plan.json`, `run.json`, `sarif.json`, and the generated collection are attached to this run.');
          fs.writeFileSync('sarif_summary.md', lines.join('\n'));
          NODE

      - uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository }}
        with:
          header: Postman Security Summary
          path: sarif_summary.md

      # Upload SARIF pinned to PR head (only same-repo PRs / pushes)
      - name: Upload SARIF to GitHub Code Scanning
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif.json
          category: openapi-postman-security
          ref: ${{ github.event_name == 'pull_request' && format('refs/heads/{0}', github.head_ref) || github.ref }}
          sha: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}

      - name: Upload artifacts (diff, plan, run, sarif, collection)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-security-output
          path: |
            diff.json
            plan.json
            run.json
            sarif.json
            generated-security-test.postman_collection.json

      - name: Stop sample app
        if: always()
        run: |
          kill "$(cat app.pid)" 2>/dev/null || true
