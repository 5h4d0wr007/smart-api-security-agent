name: OpenAPI → Security tests with Postman MCP

on:
  pull_request:
    paths:
      - "openapi/**.y*ml"
      - "openapi/**.json"
      - "app/**"
      - "tools/**"
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

env:
  POSTMAN_MCP_URL: ${{ vars.POSTMAN_MCP_URL }}                # e.g. https://mcp.postman.com/mcp
  POSTMAN_WORKSPACE_NAME: ${{ vars.POSTMAN_WORKSPACE_NAME }}  # e.g. Security Demo
  POSTMAN_ENV_NAME: ${{ vars.POSTMAN_ENV_NAME }}

jobs:
  test-on-openapi-change:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Setup Node (for swagger-cli)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install openai requests

      - name: Install CLI tooling (Postman CLI + swagger-cli)
        run: |
          # Postman CLI (official)
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
          # OpenAPI validator
          npm i -g @apidevtools/swagger-cli@4
          postman --version
          swagger-cli --version

      - name: Install oasdiff (Linux binary, pinned)
        run: |
          set -euo pipefail
          OASDIFF_VERSION="v1.10.28"
          TARBALL="oasdiff_${OASDIFF_VERSION#v}_linux_amd64.tar.gz"
          URL_PRIMARY="https://github.com/Tufin/oasdiff/releases/download/${OASDIFF_VERSION}/${TARBALL}"
          URL_FALLBACK="https://github.com/oasdiff/oasdiff/releases/download/${OASDIFF_VERSION}/${TARBALL}"
          echo "Downloading oasdiff ${OASDIFF_VERSION}…"
          if ! curl -fL "$URL_PRIMARY" -o oasdiff.tgz; then
            echo "Primary URL failed, trying fallback…"
            curl -fL "$URL_FALLBACK" -o oasdiff.tgz
          fi
          tar -xzf oasdiff.tgz
          chmod +x oasdiff
          sudo mv oasdiff /usr/local/bin/oasdiff

      - name: Start sample app (localhost:8000)
        run: |
          python app/app.py &
          echo $! > app.pid
          # Warm up; just need the server responding
          for i in {1..20}; do
            if curl -fsSI http://127.0.0.1:8000/ >/dev/null 2>&1; then
              echo "App is up"
              break
            fi
            sleep 1
          done

      - name: Compute OpenAPI diff (base vs head)
        run: |
          set -euo pipefail
          BASE=origin/${{ github.base_ref }}
          HEAD=origin/${{ github.head_ref }}
          mkdir -p .tmp
          FILE=$(git diff --name-only "$BASE...$HEAD" | grep -E '^openapi/.*\.(ya?ml|json)$' | head -n1 || true)
          if [ -z "${FILE:-}" ]; then
            echo "No OpenAPI changes detected."
            echo '{}' > diff.json
          else
            git show "$BASE:$FILE" > .tmp/base.yaml || cp openapi/api.v1.yaml .tmp/base.yaml
            git show "$HEAD:$FILE" > .tmp/head.yaml || cp openapi/api.yaml    .tmp/head.yaml
            swagger-cli validate .tmp/base.yaml
            swagger-cli validate .tmp/head.yaml
            oasdiff diff --format json .tmp/base.yaml .tmp/head.yaml > diff.json
          fi
          echo "Wrote diff.json"

      - name: LLM → plan & create/overwrite collection via official Postman MCP
        env:
          OPENAI_API_KEY:  ${{ secrets.OPENAI_API_KEY }}
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          python tools/agent_openapi_to_postman.py \
            --base openapi/api.v1.yaml \
            --head openapi/api.yaml \
            --diff diff.json \
            --collection "security test collection" \
            --plan plan.json

      - name: Postman CLI login (non-interactive)
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          postman login --with-api-key "$POSTMAN_API_KEY"

      - name: Run generated collection with Postman CLI (JSON reporter)
        continue-on-error: true
        run: |
          postman collection run ./generated-security-test.postman_collection.json \
            --reporters cli,json \
            --reporter-json-export run.json \
          || true
          # ensure run.json exists so the next step never crashes
          [ -f run.json ] || echo '{"run":{"failures":[],"stats":{"assertions":{"total":0,"failed":0}}}}' > run.json

      - name: Convert Postman report → SARIF
        run: |
          python tools/cli_report_to_sarif.py run.json sarif.json

      # === Sticky PR comment + Job Summary (NOW reads run.run.failures first) ===
      - name: Build PR summary markdown
        if: github.event_name == 'pull_request'
        run: |
          node <<'NODE'
          const fs = require('fs');

          function severityFrom(text) {
            const s = (text||'').toLowerCase();
            if (s.includes('unauth') || s.includes('401') || s.includes('forbidden') || s.includes('role') || s.includes('403')) return 'error';
            if (s.includes('invalid') || s.includes('400') || s.includes('conflict') || s.includes('409')) return 'warning';
            return 'note';
          }
          const emoji = (l)=>({error:'❌',warning:'⚠️',note:'ℹ️'})[l]||'❔';

          // Prefer SARIF only if it contains non-placeholder results
          let sarifResults = [];
          try {
            const s = JSON.parse(fs.readFileSync('sarif.json','utf8'));
            sarifResults = (((s.runs||[{}])[0]||{}).results)||[];
          } catch(e){}

          let run = null;
          try { run = JSON.parse(fs.readFileSync('run.json','utf8')); } catch(e){}

          function rowsFromFailures(r) {
            const fails = (r && r.run && Array.isArray(r.run.failures)) ? r.run.failures : [];
            const out = [];
            for (const f of fails) {
              const itemName =
                (f.parent && f.parent.name) ||
                (f.source && f.source.name) ||
                (f.cursor && f.cursor.item && f.cursor.item.name) ||
                'request';
              const testName = (f.error && (f.error.test || f.error.name)) || 'Assertion failed';
              const detail = (f.error && f.error.message) || '';
              const lvl = severityFrom(`${testName} ${detail}`);
              const category = (lvl==='error' ? 'Authorization/Authentication' : 'Validation');
              out.push({
                level: lvl,
                message: `[${category}] ${itemName}: ${testName}${detail ? ' — ' + detail : ''}`
              });
            }
            return out;
          }

          function rowsFromExecutions(r) {
            const out = [];
            if (!r || !r.run) return out;
            const executions = Array.isArray(r.run.executions) ? r.run.executions : [];
            for (const ex of executions) {
              const itemName =
                (((ex.item||{}).name) ||
                 ((ex.request||{}).name) ||
                 ex.itemName ||
                 'request');
              const assertions = Array.isArray(ex.assertions) ? ex.assertions : [];
              for (const a of assertions) {
                if (!a.error) continue;
                const testName = a.assertion || a.name || (a.error && a.error.message) || 'Security test failed';
                const lvl = severityFrom(testName);
                const category = (lvl==='error' ? 'Authorization/Authentication' : 'Validation');
                out.push({ level: lvl, message: `[${category}] ${itemName}: ${testName}` });
              }
            }
            return out;
          }

          const nonCleanSarif = sarifResults.filter(r => (r.ruleId||'') !== 'postman.security.cleanrun');

          // Priority: run.failures → run.executions.assertions → SARIF
          let rows = [];
          rows = rowsFromFailures(run);
          if (rows.length === 0) rows = rowsFromExecutions(run);
          if (rows.length === 0 && nonCleanSarif.length > 0) {
            rows = nonCleanSarif.map(r => ({
              level: r.level||'note',
              message: (r.message && r.message.text) || '(no message)'
            }));
          }

          const total = rows.length;
          const lines = [];
          lines.push('**Postman Security Test Agent — Findings**');
          lines.push('');
          lines.push(`Detected **${total}** finding${total===1?'':'s'}.`);
          if (total === 0) {
            lines.push('');
            lines.push('> ✅ No security test failures detected');
          } else {
            lines.push('');
            lines.push('|  | Severity | Finding |');
            lines.push('|---|---|---|');
            for (const r of rows) {
              lines.push(`| ${emoji(r.level)} | ${r.level} | ${r.message} |`);
            }
          }
          lines.push('');
          lines.push('Artifacts: `diff.json`, `plan.json`, `run.json`, `sarif.json`, and the generated collection are attached to this run.');
          fs.writeFileSync('sarif_summary.md', lines.join('\n'));
          NODE

      - uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository }}
        with:
          header: Postman Security Summary
          path: sarif_summary.md

      # Upload SARIF pinned to PR head (only same-repo PRs / pushes)
      - name: Upload SARIF to GitHub Code Scanning
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif.json
          category: openapi-postman-security
          ref: ${{ github.event_name == 'pull_request' && format('refs/heads/{0}', github.head_ref) || github.ref }}
          sha: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}

      - name: Upload artifacts (diff, plan, run, sarif, collection)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-security-output
          path: |
            diff.json
            plan.json
            run.json
            sarif.json
            generated-security-test.postman_collection.json

      - name: Stop sample app
        if: always()
        run: |
          kill "$(cat app.pid)" 2>/dev/null || true
