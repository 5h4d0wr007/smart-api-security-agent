name: OpenAPI → Postman MCP → Security tests

on:
  push:        # run on any branch push
  pull_request:  # run on any PR (not just main)
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  security-events: write   # needed to upload SARIF

jobs:
  api-security:
    runs-on: ubuntu-latest

    env:
      POSTMAN_MCP_URL: https://mcp.postman.com/mcp
      POSTMAN_WORKSPACE_NAME: Security Demo

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Discover secrets availability (gate for forks)
        id: gates
        shell: bash
        run: |
          has_openai=false
          has_postman=false
          if [ -n "${{ secrets.OPENAI_API_KEY }}" ];   then has_openai=true; fi
          if [ -n "${{ secrets.POSTMAN_API_KEY }}" ];  then has_postman=true; fi
          if $has_openai && $has_postman; then echo "has_secrets=true"  >> $GITHUB_OUTPUT; else echo "has_secrets=false" >> $GITHUB_OUTPUT; fi
          echo "has_openai=$has_openai"
          echo "has_postman=$has_postman"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install deps
        run: |
          set -e
          npm install -g @apidevtools/swagger-cli

          sudo apt-get update -y
          sudo apt-get install -y jq curl

          # oasdiff (arch-aware)
          OASDIFF_VERSION=1.10.28
          UNAME_ARCH="$(uname -m)"
          if [ "$UNAME_ARCH" = "x86_64" ]; then
            OAS_ASSET="oasdiff_${OASDIFF_VERSION}_Linux_x86_64.tar.gz"
          elif [ "$UNAME_ARCH" = "aarch64" ]; then
            OAS_ASSET="oasdiff_${OASDIFF_VERSION}_Linux_arm64.tar.gz"
          else
            echo "Unsupported arch: $UNAME_ARCH"; exit 1
          fi
          curl -fsSL -o oasdiff.tgz "https://github.com/Tufin/oasdiff/releases/download/v${OASDIFF_VERSION}/${OAS_ASSET}"
          tar -xzf oasdiff.tgz oasdiff
          sudo mv oasdiff /usr/local/bin/oasdiff
          sudo chmod +x /usr/local/bin/oasdiff
          oasdiff --help >/dev/null

          python -m pip install --upgrade pip
          pip install requests openai

      - name: Start sample app (localhost:8000)
        run: |
          pip install flask
          python app/app.py &
          echo $! > app.pid
          sleep 2

      - name: Compute OpenAPI diff (base vs head)
        run: |
          set -euo pipefail
          cp openapi/api.v1.yaml .tmp.base.yaml || true
          cp openapi/api.yaml    .tmp.head.yaml
          swagger-cli validate .tmp.base.yaml
          swagger-cli validate .tmp.head.yaml
          oasdiff diff --format json .tmp.base.yaml .tmp.head.yaml > diff.json
          echo "Wrote diff.json"

      - name: LLM → plan & create/overwrite collection via Postman MCP
        if: steps.gates.outputs.has_secrets == 'true'
        env:
          OPENAI_API_KEY:  ${{ secrets.OPENAI_API_KEY }}
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
          POSTMAN_MCP_URL: ${{ env.POSTMAN_MCP_URL }}
          POSTMAN_WORKSPACE_NAME: ${{ env.POSTMAN_WORKSPACE_NAME }}
        run: |
          python tools/agent_openapi_to_postman.py --base openapi/api.v1.yaml --head openapi/api.yaml
          test -f generated-security-test.postman_collection.json

      - name: Explain why LLM/Postman steps were skipped
        if: steps.gates.outputs.has_secrets != 'true'
        run: |
          echo "::warning::Secrets not available (likely a forked PR). Skipping LLM/MCP/Postman run. The workflow still runs so you can see status, but no SARIF will be uploaded."

      - name: Postman CLI login (non-interactive)
        if: steps.gates.outputs.has_secrets == 'true'
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          postman login --with-api-key "$POSTMAN_API_KEY"

      - name: Run generated collection with Postman CLI (JSON reporter)
        if: steps.gates.outputs.has_secrets == 'true'
        continue-on-error: true
        run: |
          postman collection run ./generated-security-test.postman_collection.json \
            --reporters cli,json \
            --reporter-json-export run.json \
          || true

      - name: Convert Postman report → SARIF
        if: steps.gates.outputs.has_secrets == 'true'
        run: |
          python tools/cli_report_to_sarif.py run.json sarif.json
          python - <<'PY'
import json; 
j=json.load(open('sarif.json')); 
print("SARIF results:", len(j.get("runs",[{}])[0].get("results",[])))
PY

      - name: Upload SARIF to GitHub Code Scanning
        if: steps.gates.outputs.has_secrets == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif.json
          category: openapi-postman-security
          commit_sha: ${{ github.event.pull_request.head.sha || github.sha }}
          ref:        ${{ github.event.pull_request.head.ref || github.ref }}

      - name: Upload artifacts (diff, plan, run, sarif, collection)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-security-output
          path: |
            diff.json
            plan.json
            run.json
            sarif.json
            generated-security-test.postman_collection.json

      - name: Stop app
        if: always()
        run: |
          if [ -f app.pid ]; then kill $(cat app.pid) || true; fi
